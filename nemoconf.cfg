#!/bin/sh

function configure()
{
    # This function should configure all settings/modules needed to
    # later prepare the NEMO run directory and set variables used
    # in the run script


    # Configure paths for building/running NEMO
    nemo_src_dir=/lustre/tmp/uotilap
    run_dir=/lustre/tmp/${USER}/${exp_name}
    ini_data_dir=/lustre/tmp/uotilap/CMCC/init_files

    # File for standard output.
    # NOTE: This will be modified for restart jobs!
    stdout_file=${PBS_O_WORKDIR}/out/${PBS_JOBNAME}.out

    # Resubmit this job for automatic restarts? [true/false]
    # Also, add options for the resubmit command here.
    resubmit_job=false
    resubmit_opt=""

    # Configure GRIBEX paths
    export LOCAL_DEFINITION_TEMPLATES=/stornext/field/users/odonnell/models/ec-earth/gribex/gribtemplates

    # Configure GRIB API paths
    export GRIB_DEFINITION_PATH=/stornext/field/users/odonnell/models/ec-earth/grib_api/1.12.3/intel/share/grib_api/definitions
    export GRIB_SAMPLES_PATH=/stornext/field/users/odonnell/models/ec-earth/grib_api/1.12.3/intel/share/grib_api/ifs_samples/grib1
    export GRIB_BIN_PATH=/stornext/field/users/odonnell/models/ec-earth/grib_api/1.12.3/intel/bin

    # Configure number of processors per node
    proc_per_node=20

    # Configure and load modules
    pre_load_modules_cmd="source /opt/modules/default/etc/modules.sh"
    module_list=""

    if [ -n "${module_list}" ]
    then
        set +u
        if [ -n "${pre_load_modules_cmd}" ]
        then
            ${pre_load_modules_cmd}
        fi
        for m in "${module_list}"
        do
            module add ${m}
        done
        set -u
    fi

    # Add directories to the shared library search path
    if [ -n "" ]
    then
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}""
    fi

    ulimit -s unlimited
}


function launch()
{
    # This function should launch the execution of a coupled experiment and handle
    # any configuration that for some reason couldnt go into the configuration
    # function
    
    # Compute and check the node distribution
    set +u

    cmd="aprun"

    while (( "$#" ))
    do
        nranks=$1
        executable=./$(basename $2)
        shift
        shift

        cmd+=" -n $nranks -N ${proc_per_node} -cc cpu -ss $executable"
	
        while (( "$#" )) && [ "$1" != "--" ]
        do
            cmd+=" $1"
            shift
        done
        shift || true

	(( "$#" )) && cmd+=" :"
    done

    info "Using command $cmd"
    $cmd
}

function launch_atm()
{
    # This function should launch the execution of an atmospheric-only experiment and
    # handle any configuration that for some reason couldnt go into the configuration
    # function

    # Compute and check the node distribution

    set +u

    info "======================="
    info "Processor distribution:"
    info "-----------------------"
    info "IFS:   ${ifs_numproc}"
    info "======================="
    
    aprun -n ${ifs_numproc} ./$(basename ${ifs_exe_file}) -v ecmwf -e $exp_name  \
             1>stdout.log 2>stderr.log
}

function launch_wchem()
{
    # This function should launch the execution of a coupled experiment and handle
    # any configuration that for some reason couldnt go into the configuration 
    # function

    # Compute and check the node distribution
    set +u

    info "======================="
    info "Processor distribution:"
    info "-----------------------"
    info "IFS:  ${ifs_numproc}"
    info "TM5:  ${tm5_numproc}"
    info "======================="

    aprun -n ${ifs_numproc} ./$(basename ${ifs_exe_file}) -v ecmwf -e $exp_name : \
	  -n ${tm5_numproc} ${tm5_exe_file} tm5-run.rc \
             1>stdout.log 2>stderr.log

}

function launch_oce()
{
    # This function should launch the execution of a coupled experiment and handle
    # any configuration that for some reason couldnt go into the configuration
    # function

    # Compute and check the node distribution
    set +u


    info "======================="
    info "Processor distribution:"
    info "-----------------------"
    info "NEMO:  ${nem_numproc}"
    info "XIOS:  ${xio_numproc}"
    info "======================="
    
    #aprun -n ${nem_numproc} ./$(basename ${nem_exe_file}) \
    #         1>stdout.log 2>stderr.log

    aprun -n ${nem_numproc} ./$(basename ${nem_exe_file}) : \
	  -n ${xio_numproc} ./$(basename ${xio_exe_file}) \
             1>stdout.log 2>stderr.log
}

function finalise()
{
    # This function should execute of any post run functionality, e.g.
    # platform dependent cleaning or a resubmit

    if ${resubmit_job} && [ $(date -d "${leg_end_date}" +%s) -lt $(date -d "${run_end_date}" +%s) ]
    then
        info "Resubmitting job for leg $((leg_number+1))"
        # Submit command
        cd ${PBS_O_WORKDIR}
        qsub -j oe -m n                                                                      \
             -o ${run_dir}/$(basename ${stdout_file}).$(printf %03d $((leg_number+1)))       \
             ${resubmit_opt}                                                                 \
             -l mppwidth=$(qstat -f ${PBS_JOBID} | awk '/Resource_List.mppwidth/{print $3}') \
             -W depend=afterok:${PBS_JOBID}                                                  \
             ./${run_script}
    fi
}
